<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fieldnotes.tech</title>
    <link>https://fieldnotes.tech/</link>
    <description>Recent content on fieldnotes.tech</description>
    <generator>Hugo - gohugo.io</generator>
    <language>en</language>
    <contact>samsalisbury@gmail.com</contact>
    <copyright>&copy; Sam Salisbury 2019</copyright>
    
        <atom:link href="https://fieldnotes.tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>YES/NO Boolean Env Vars</title>
      <link>https://fieldnotes.tech/posts/yes-no-boolean-env-vars/</link>
      <pubDate>Tue, 25 Jun 2019 00:57:00 +0000</pubDate>
      <author>Sam Salisbury</author>
      <guid>https://fieldnotes.tech/posts/yes-no-boolean-env-vars/</guid>
      <description></description>
      
      <content>&lt;p&gt;I use &lt;code&gt;YES&lt;/code&gt; and &lt;code&gt;NO&lt;/code&gt; in environment variables to store Boolean values. I have come to the conclusion that this is in some way optimal after trying all the other obvious options and finding that each has readability flaws:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; are confusing in POSIX shells like bash, because &lt;code&gt;return 0&lt;/code&gt; and &lt;code&gt;exit 0&lt;/code&gt; usually mean &amp;ldquo;success&amp;rdquo; (the command did not fail) which we think of as truthy. Likewise, &lt;code&gt;1&lt;/code&gt; or any other non-zero number is treated as failure in these contexts, which intuitively feels falseish. Most other programming languages like C treat &lt;code&gt;0&lt;/code&gt; as false and &lt;code&gt;1&lt;/code&gt; as true. Potential confusion abounds.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; (strings) both work, and are not too bad. However there are shell builtin functions with these same names, which can occasionally be confusing. Why entertain that risk?!&lt;/li&gt;
&lt;li&gt;The empty or nonempty string is pretty bad. If you arbitrarily set it to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;YES&lt;/code&gt; to be nonempty, then you can guarantee someone will try setting it to &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;NO&lt;/code&gt;, and be gravely disappointed at the result.&lt;/li&gt;
&lt;li&gt;The set or not set variable is the worst of all worlds. It inherits the same issues as the empty or nonempty string, but has some extra quirks all of its own. Unsetting a variable in your own interactive shell isn&amp;rsquo;t that bad &lt;code&gt;unset VAR&lt;/code&gt; and you&amp;rsquo;re done. However, passing that command down through a stack of Makefiles, scripts, Docker run invocations etc is impossible. Some might try to be clever and set the var to empty, but it doesn&amp;rsquo;t work. Time to get editing that stack of turtles. Be kind, give your users a knob they can use at a distance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;YES and NO cannot be confused with shell builtins, or implicit integer conversations to bools, and the words map rather intuitively to true and false respectively.&lt;/p&gt;

&lt;p&gt;The comparison I usually use in practice is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if [ $VAR = YES ]; then
  echo You said yes!
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Completely ignoring the potential &lt;code&gt;NO&lt;/code&gt; value, treating anything that&amp;rsquo;s not &lt;code&gt;YES&lt;/code&gt; as false. Coupling this with default false values  for options dictated by env vars usually makes this safe. If you really need a decision to have been made (i.e. it is not safe to default to false) then you might want to fail if it&amp;rsquo;s not set explicitly to &lt;code&gt;YES&lt;/code&gt; or &lt;code&gt;NO&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, after many years of writing and maintaining software, I have come to the firm belief that environment variables indicating the Boolean True or False should be stored in environment variables as &lt;code&gt;YES&lt;/code&gt; or &lt;code&gt;NO&lt;/code&gt; respectively. This simply sidesteps many potential readability and usability downsides with the other methods. You can be as strict as you like with casing, or ignoring/handling malformed values, but default to YES/NO and stop confusing yourself and others. (Well, me anyway.)&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Hugo Makefile</title>
      <link>https://fieldnotes.tech/posts/hugo-makefile/</link>
      <pubDate>Sun, 03 Mar 2019 22:37:00 +0000</pubDate>
      <author>Sam Salisbury</author>
      <guid>https://fieldnotes.tech/posts/hugo-makefile/</guid>
      <description></description>
      
      <content>&lt;p&gt;This blog is hosted on &lt;a href=&#34;https://pages.github.com&#34;&gt;GitHub Pages&lt;/a&gt;
and published using &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;.
Since Go is my preferred language at the moment, Hugo seemed attractive.&lt;/p&gt;

&lt;p&gt;There are 2 Git repos for this website:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Source code:
&lt;a href=&#34;https://github.com/fieldnotes-tech/fieldnotes.tech&#34;&gt;github.com/fieldnotes-tech/fieldnotes.tech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rendered static site:
&lt;a href=&#34;https://github.com/fieldnotes-tech/fieldnotes-tech.github.io&#34;&gt;github.com/fieldnotes-tech/fieldnotes-tech.github.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Publishing involves updating the source,
and having Hugo generate the static site.
To make this easier to use I&amp;rsquo;ve added a &lt;code&gt;Makefile&lt;/code&gt;
which pulls the rendered site as a submodule
in the &lt;code&gt;public/&lt;/code&gt; directory,
which is Hugo&amp;rsquo;s default place to write the rendered site.
It also pulls the &lt;a href=&#34;https://github.com/ribice/kiss&#34;&gt;kiss theme&lt;/a&gt;&amp;rsquo;s submodule,
and ensures it&amp;rsquo;s set to a specific revision.
(I don&amp;rsquo;t want to be surprised if this gets broken in some way later.)&lt;/p&gt;

&lt;p&gt;This Makefile works fine on my dev machine,
but will need some refinement for the next phase:
having the site regenerated in CI on every push.
Some issues that will need to be solved are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It presumes the &lt;code&gt;hugo&lt;/code&gt; command is already installed,&lt;/li&gt;
&lt;li&gt;It does not assert which version of Hugo should be used.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the Makefile as it stands right now&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Makefile&#34;&gt;SHELL := /usr/bin/env bash
HUGO := hugo
DATE := $(shell date)
DOMAIN := fieldnotes.tech
KISS_THEME_REVISION := 55f6f0068e8304bf7ac848e68f918912bd8d5336

.PHONY: publish commit public kiss-theme submodules clean-workspace

publish: commit
	cd public &amp;amp;&amp;amp; git push origin master

commit: public
	cd public &amp;amp;&amp;amp; \
	if git diff --exit-code; then \
		echo &amp;quot;Nothing to commit.&amp;quot;; \
	else \
		git add -A &amp;amp;&amp;amp; git commit -m &amp;quot;publish: $(DATE)&amp;quot;; \
	fi

public: clean-workspace submodules kiss-theme
	rm -rf $@/*
	echo $(DOMAIN) &amp;gt; $@/CNAME
	$(HUGO)

kiss-theme: submodules
	cd themes/kiss &amp;amp;&amp;amp; git reset --hard $(KISS_THEME_REVISION)

submodules:
	git submodule update --recursive --remote

clean-workspace:
	@if [ ! -z &amp;quot;$$(git status -s)&amp;quot; ]; then echo &amp;quot;[ERR] Workspace dirty.&amp;quot;; exit 1; fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next up: getting this website built in CI on every push&amp;hellip;&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://fieldnotes.tech/posts/hello-world/</link>
      <pubDate>Sun, 03 Mar 2019 09:48:12 +0000</pubDate>
      <author>Sam Salisbury</author>
      <guid>https://fieldnotes.tech/posts/hello-world/</guid>
      <description></description>
      
      <content>&lt;p&gt;Hello world, welcome to fieldnotes.tech!&lt;/p&gt;

&lt;p&gt;Here I intend to keep my notes-to-self, code snippets, musings
and other short bits &amp;amp; pieces on the subject of software engineering
and tech in general.
Most of what Iâ€™ll write here will be gleaned from working in the field
and solving real issues as they arise.
Some of it will be pretty esoteric, rough, unfinished
and maybe even controversial or just plain wrong;
but all will be in the spirit of earnestly trying to be better at what I do.&lt;/p&gt;

&lt;p&gt;With all these commitments and boring earnestness out of the way,
let&amp;rsquo;s see what it becomes!&lt;/p&gt;
</content>
      
    </item>
    
  </channel>
</rss>