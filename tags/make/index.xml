<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>make on fieldnotes.tech</title>
    <link>https://fieldnotes.tech/tags/make/</link>
    <description>Recent content in make on fieldnotes.tech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>&amp;copy; Sam Salisbury 2019</copyright>
    <lastBuildDate>Tue, 16 Jul 2019 21:21:00 +0000</lastBuildDate>
    
	<atom:link href="https://fieldnotes.tech/tags/make/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Multi-File CircleCI Config</title>
      <link>https://fieldnotes.tech/circleci-multi-file-config/</link>
      <pubDate>Tue, 16 Jul 2019 21:21:00 +0000</pubDate>
      
      <guid>https://fieldnotes.tech/circleci-multi-file-config/</guid>
      <description>CircleCI configuration for complex projects can grow very large. By default you have to store all that configuration in a single .circleci/config.yml which quickly gets unmanageable. Compounded with that, is that if you are using the on-prem CircleCI Enterprise, you are limited to using CircleCI 2.0 syntax, which is missing some really useful code reuse features like Commands, Executors and Orbs.
I was frustrated by these problems on a recent project with complex CI requirements, so, with a little nudge by a colleague who knew the CircleCI CLI inside out, I came up with a solution&amp;hellip;</description>
    </item>
    
    <item>
      <title>How to SHELL for compatible Makefiles</title>
      <link>https://fieldnotes.tech/how-to-shell-for-compatible-makefiles/</link>
      <pubDate>Thu, 04 Jul 2019 08:56:00 +0000</pubDate>
      
      <guid>https://fieldnotes.tech/how-to-shell-for-compatible-makefiles/</guid>
      <description>The upshot is if you care about maximum compatibility with different versions of GNU Make, don&amp;rsquo;t use .SHELLFLAGS just put all your args in-line in the SHELL variable, and make sure to always always use -c as your last argument. E.g. for bash in &amp;ldquo;strict mode&amp;rdquo;
SHELL := /usr/bin/env bash -euo pipefail -c But why? I really care about the out of the box development experience on projects I maintain. For me, this currently means ensuring that you can at least build and run tests on vanilla macOS and GNU/Linux distros, without having to upgrade standard tools like, for example, make.</description>
    </item>
    
    <item>
      <title>Hugo Makefile</title>
      <link>https://fieldnotes.tech/hugo-makefile/</link>
      <pubDate>Sun, 03 Mar 2019 22:37:00 +0000</pubDate>
      
      <guid>https://fieldnotes.tech/hugo-makefile/</guid>
      <description>This blog is hosted on GitHub Pages and published using Hugo. Since Go is my preferred language at the moment, Hugo seemed attractive.
There are 2 Git repos for this website:
 Source code: github.com/fieldnotes-tech/fieldnotes.tech Rendered static site: github.com/fieldnotes-tech/fieldnotes-tech.github.io  Publishing involves updating the source, and having Hugo generate the static site. To make this easier to use I&amp;rsquo;ve added a Makefile which pulls the rendered site as a submodule in the public/ directory, which is Hugo&amp;rsquo;s default place to write the rendered site.</description>
    </item>
    
  </channel>
</rss>